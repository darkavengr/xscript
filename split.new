int ParseVariableName(char *tokens[MAX_SIZE][MAX_SIZE],int start,int end,varsplit *split) {
int count;
int varend;
varsplit *next=split;
int subscriptstart;
int subscriptend;
int commafound=FALSE;
char ParseEndChar;
char *evaltokens[MAX_SIZE][MAX_SIZE];
int evaltc;

//a.b.c.d

strcpy(split->name,tokens[start]);		/* copy name */
split->next=NULL;

for(count=start;count<end;count++) {
	if((strcmp(tokens[count],"(") == 0) || (strcmp(tokens[count],"[") == 0)) {		/* at end */
				if(strcmp(tokens[count],"(") == 0) ParseEndChar=')';
				if(strcmp(tokens[count],"[") == 0) ParseEndChar=']';

				varend=count;
				while(*tokens[varend] != ParseEndChar) {
					if(varend == end) {		/* Missing end */
						SetLastError(SYNTAX_ERROR);
						return(-1);
					}

						varend++;
					}
				}

				if(strcmp(tokens[count],",") == 0) {		 /* 3D array */
					/* invalid expression */
					if((IsValidExpression(tokens,subscriptstart+1,count-1) == FALSE) || (IsValidExpression(tokens,count+1,subscriptend-1) == FALSE)) {
						SetLastError(INVALID_EXPRESSION);
						return(-1);
					}
		
					evaltc=SubstituteVariables(subscriptstart,count,tokens,evaltokens);
					split->x=EvaluateExpression(evaltokens,0,evaltc);
	
					evaltc=SubstituteVariables(count+1,subscriptend,tokens,evaltokens);
					split->y=EvaluateExpression(evaltokens,0,evaltc);
	
					commafound=TRUE;
				 	break;
				}
		}

		if(commafound == FALSE) {			/* 2d array */
			if(IsValidExpression(tokens,subscriptstart+1,subscriptend-1) == FALSE) return(-1);	/* invalid expression */

			evaltc=SubstituteVariables(subscriptstart,subscriptend,tokens,evaltokens);
	
			split->x=EvaluateExpression(evaltokens,0,evaltc);
		 	split->y=1;
		}
	
	}

	if(strcmp(tokens[count],".") == 0) {		/* at end of field */
	
		next->next=malloc(sizeof(varsplit));	/* allocate next link in list */
		if(next->next == NULL) {	/* can't allocate */
			SetLastError(NO_MEM);
			return(-1);
		}

		next=next->next;
	}

return(end-start);
}

