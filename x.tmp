/*
 * Call binary module
 *
 * In:  functionname	Function name
	modulename	Module name
 *	paramcount	Number of parameters
 *	result		Result variable
 *	parameters	Function parameters
 *
 * Returns: 0 on success or -1 on error
 *
 */
int CallModule(char *functionname,char *modulename,int paramcount,varsplit *result,char *parameters[MAX_SIZE][MAX_SIZE]) {
int count;
int vartype;
void *varptrs[MAX_SIZE];
int (*callptr_integer)(void *,void *,void *,void *,void *,void *,void *,void *);
double (*callptr_double)(void *,void *,void *,void *,void *,void *,void *,void *);
float (*callptr_single)(void *,void *,void *,void *,void *,void *,void *,void *);
long (*callptr_long)(void *,void *,void *,void *,void *,void *,void *,void *);
char *(*callptr_string)(void *,void *,void *,void *,void *,void *,void *,void *);
FUNCTIONCALLSTACK modulefunctioncall;
varval resultvar;
int resultype=GetVariableType(result->name);

AddModule(modulename);		/* add module */

/* get variable values */

for(count=1;count<paramcount;count++) {
	vartype=GetVariableType(parameters[count]);		/* get variable type */

	if(vartype == VAR_SINGLE) {
		varptrs[count-1]=malloc(sizeof(float));				/* allocate paramument */
		if(varptrs[count-1] == NULL) {
			SetLastError(NO_MEM);
			return(-1);
		}

		varptrs[count-1]=(void *)  atof(parameters[count]);
	}
0	else if(vartype == VAR_NUMBER) {
		varptrs[count-1]=malloc(sizeof(double));		/* allocate paramument */
		if(varptrs[count-1] == NULL) {
			SetLastError(NO_MEM);
			return(-1);
		}

		varptrs[count-1]=(void *) strtof(parameters[count]);
	}
	else if(vartype == VAR_INTEGER) {
		varptrs[count-1]=malloc(sizeof(int));				/* allocate paramument */
		if(varptrs[count-1] == NULL) {
			SetLastError(NO_MEM);
			return(-1);
		}

		varptrs[count-1]=(void *) atoi(parameters[count]);
	}
	else if(vartype == VAR_LONG) {
		varptrs[count-1]=malloc(sizeof(long));				/* allocate paramument */
		if(varptrs[count-1] == NULL) {
			SetLastError(NO_MEM);
			return(-1);
		}

		varptrs[count-1]=(void *) atol(parameters[count]);
	}
	else if(vartype == VAR_STRING) {
		varptrs[count-1]=malloc(strlen(parameters[count]));
		if(varptrs[count-1] == NULL) {
			SetLastError(NO_MEM);
			return(-1);
		}

		strcpy(varptrs[count-1],parameters[count]);
	}
}


/* call binary function and return a value */

/* push function onto call stack */
strcpy(modulefunctioncall.name,functionname);

modulefunctioncall.callptr=NULL;
modulefunctioncall.startlinenumber=-1;
modulefunctioncall.currentlinenumber=-1;
modulefunctioncall.saveinformation=NULL;
modulefunctioncall.saveinformation_top=NULL;
modulefunctioncall.parameters=NULL;
modulefunctioncall.vars=NULL;
modulefunctioncall.vars_end=NULL;
modulefunctioncall.stat=0;
modulefunctioncall.moduleptr=GetModuleEntry(modulename);

strcpy(modulefunctioncall.returntype,vartypenames[resultype]);
modulefunctioncall.type_int=resultype;
modulefunctioncall.lastlooptype=0;
modulefunctioncall.last=NULL;
modulefunctioncall.next=NULL;
PushFunctionCallInformation(&modulefunctioncall);

if(resultype == VAR_SINGLE) {
	callptr_single=GetLibraryFunctionAddress(GetModuleHandle(modulename),functionname);

	resultvar.f=callptr_single(*parameters[1],*parameters[2],*parameters[3],*parameters[4],*parameters[5],*parameters[6],*parameters[7],*parameters[8]);
}
else if(resultype == VAR_NUMBER) {
	callptr_double=GetLibraryFunctionAddress(GetModuleHandle(modulename),functionname);

	resultvar.d=callptr_double(*parameters[1],*parameters[2],*parameters[3],*parameters[4],*parameters[5],*parameters[6],*parameters[7],*parameters[8]);
}
else if(resultype == VAR_INTEGER) {
	printf("module name=%s\n",modulename);
	printf("module handle=%lX\n",GetModuleHandle(modulename));

	printf("Calling function %s\n",functionname);
	
	callptr_integer=GetLibraryFunctionAddress(GetModuleHandle(modulename),functionname);

	printf("callptr_integer=%lX\n",callptr_integer);
//	asm("int $3");

	resultvar.i=callptr_integer(*parameters[1],*parameters[2],*parameters[3],*parameters[4],*parameters[5],*parameters[6],*parameters[7],*parameters[8]);

	printf("called function\n");
}
else if(resultype == VAR_LONG) {
	callptr_long=GetLibraryFunctionAddress(GetModuleHandle(modulename),functionname);

	resultvar.l=callptr_long(*parameters[1],*parameters[2],*parameters[3],*parameters[4],*parameters[5],*parameters[6],*parameters[7],*parameters[8]);
}
else if(resultype == VAR_STRING) {
	callptr_string=GetLibraryFunctionAddress(GetModuleHandle(modulename),functionname);

	strcpy(resultvar.s,callptr_string(*parameters[1],*parameters[2],*parameters[3],*parameters[4],*parameters[5],*parameters[6],*parameters[7],*parameters[8]));
}

PopFunctionCallInformation();			/* remove function from function call stack */

//int UpdateVariable(char *name,char *fieldname,varval *val,int x,int y,int fieldx,int fieldy);

if(UpdateVariable(result->name,&resultvar,result->fieldname,result->x,result->y,result->fieldx,result->fieldy) == -1) return(-1);	/* update result variable */

SetLastError(NO_ERROR);
return(0);
}

